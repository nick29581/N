          //11. apply indhyp; case.3; up.p2
          //2. apply T-New; case.2; 1
          //3. assume {not x in fv(([e]))}
          //TODO
          //4. substeq {new T <{e/x}[e]> = new T <[e]>}; 3
          //state
          //done= 2

      
  lemma weaktc "weakening (type checking)"
    {tcheck (G,x:U,G') |- e; T}
    where
      p1. {tcheck (G,G') |- e; T}
      p2. {not x in dom((G,G'))}
    proof
      1. sind p1
        case T-Var
          0. sym case.2
          1. -fun 0 //x1:T in G,G'; fun((G,G'))
          2. weakf 1.2; up.p2
          22. -forall 2; U //fun((G,x:U,G'))
          3. weakin 1.1 //forall G1. x1:T in G,G1,G'
          31. let {G'' = x:U}
          32. -forall 3; G'' //x1:T in G,G'',G'
          33. replace 32; 31 //x1:T in G,x:U,G'
          4. fun 33;22 //G,x:U,G'((x1)) = U1
          5. apply T-Var; 4
          6. replace' 5; case.1
          done 6
        case T-Subs
          1. apply indhyp; case.1; up.p2
          2. apply T-Subs; 1; case.2
          done 2
        case
          //in this case we use indhyp', and so get the strict ind hyp and have to eliminate the forall with U
          1. apply indhyp'; case.2; up.p2
          11. -forall 1; U
          2. apply indhyp'; case.4; up.p2
          22. -forall 2; U
          3. apply T-Invk; 11; case.3; 22
          4. replace' 3; case.1
          done 4
        case
          1. apply indhyp; case.3; up.p2
          2. apply T-New; case.2; 1
          3. replace' 2; case.1
          done 3
        case
          1. apply indhyp; case.2; up.p2
          2. apply T-Field; 1; case.3
          3. replace' 2; case.1
          done 3
      done 1
      
  lemma invertvar "inversion lemma (variables)"
    {T' = G((x))}
    {subtype |- T'; T}
    where
      p1. {tcheck G |- x; T}
    proof
      1. sind p1
        case T-Var
          1. let {T' = T}
          2. apply S-Reflex; 1
          3. replace' case.1; 1
          done 3; 2
        case T-Subs
          state
          1. let {T' = U}
          2. apply indhyp; case.1
          3. apply S-Trans; case.2; 2.2
          done 2.1; 3
      done 1
  
  lemma weaktc "weakening (type checking)"
    {tcheck (G,x:U,G') |- e; T}
    where
      p1. {tcheck (G,G') |- e; T}
      p2. {not x in dom((G,G'))}
    proof
      1. sind p1
        case T-Subs
          1. apply indhyp; case.1; up.p2
          3. let {e = e'}
          4. replace 1; 3
          2. apply= T-Subs; 4; case.2
          done 2.2
          
  lemma subred "subject reduction"
    {tcheck [] |- e'; T}
    where
      p1. {tcheck [] |- e; T}
      p2. {semantics |- e; e'}
    proof
      1. sind p2
        case RC-Field
          state
          1. replace up.p1; case.2
          //2. apply invertfield; 2
          //1. apply indhyp; case.3; p1
      
      //1. forall y; [y]
      //  case
      //    1. assume {tcheck G |- y; T}
      //    done' 1
      //1
      //11. -forall 1; x; x
      //2. exists p1; x; e
      //3. -exists 2
//      1. invert p1
//        case T-Var
//          1. assume {T = apply (G,x:U,G'); x1}
//          2. apply T-Var; 1
//          3. replace' 2; case.1
//          done 3
//        case T-Subs
//          1. assume {tcheck (G,x:U,G') |- e; U1}
//          2. apply T-Subs; 1; case.2
//          done 2
//        case
//          1. assume {tcheck (G,x:U,G') |- e3; C2}
//          2. assume {tcheck (G,x:U,G') |- [e1]; [T1]}
//          3. apply T-Invk; 1; case.3; 2
//          4. replace' 3; case.1
//          done 4
//        case
//          1. assume {tcheck (G,x:U,G') |- [e]; [T]}
//          2. apply T-New; case.2; 1
//          3. replace' 2; case.1
//          done 3
//        case
//          1. assume {tcheck (G,x:U,G') |- e2; C1}
//          2. apply T-Field; 1; case.3
//          3. replace' 2; case.1
//          done 3
//      done 1
      //2. assume {tcheck G |- e1.f1; T2}
      //3. invert 2
      //  case a.
      //    state
      //  case b.
      //    state
      //0. assume {tcheck (G,x:T,G') |- v; T}
      //1. assume {subtype |- C1; C2}
      //2. invert 1
      //  case c.
      //    state
      //    done up.0
      //  case b.
      //    state
      //    done up.0
      //  case a.
      //    state
      //    done up.0
      //2. assume {subtype |- C2; C3}
      //3. apply S-Trans; 1; 2
      //4. apply T-Null
      //5. assume {wf |- C1}
      //7. assume {tcheck G |- e; C1}
      //6. apply test; 5; 7
      //1. and p1; p2
      //2. -and 1
      //2.1
      //2.2
      // 1
      //and 2.1; 2.2
      //3. or 1; {tcheck (G,x:T,G') |- e; T}
      //4. -or 3
      //  case 1
      //    b. assume {tcheck [] |- e; T}
      //    done' b
      //  case
      //    b. assume {tcheck [] |- e; T}
      //    done' b
      //4
      //8. implies {tcheck [] |- e; T}
      //  case
      //    case
      //    1. assume {tcheck (G,x:T,G') |- e; T}
      //    done' 1
      //5. -implies 8; 4
      //done 5
      //1
      //.prog34
      //3. 1.1; p1
      //2. p1
      //up.prog34
      //state
      //clear
      //clear 1
      //clear 1; 3
      //state .
      //state up
      //state 3
      //state .prog34
      //state
      //done 1

